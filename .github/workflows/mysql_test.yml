name: MySQL Test

env:
  TEST_BSC_WALLET_PRIVATE_KEY: ${{ secrets.TEST_BSC_WALLET_PRIVATE_KEY }}
  TEST_ETH_WALLET_PRIVATE_KEY: ${{ secrets.TEST_ETH_WALLET_PRIVATE_KEY }}
  TEST_LTC_WALLET_PRIVATE_KEY: ${{ secrets.TEST_LTC_WALLET_PRIVATE_KEY }}
  TEST_BTC_WALLET_PRIVATE_KEY: ${{ secrets.TEST_BTC_WALLET_PRIVATE_KEY }}
  TEST_POLYGON_WALLET_PRIVATE_KEY: ${{ secrets.TEST_POLYGON_WALLET_PRIVATE_KEY }}
  TON_TEST_WALLET_MEMO: ${{ secrets.TON_TEST_WALLET_MEMO }}
  TRON_TEST_WALLET_PRIVATE_KEY: ${{ secrets.TRON_TEST_WALLET_PRIVATE_KEY }}
  TON_HV_TEST_WALLET_MEMO: ${{ secrets.TON_HV_TEST_WALLET_MEMO }}
  
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      db:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test]
    
    - name: Run tests and generate coverage
      run: |
        pytest -m "mysql" --cov=./ --cov-report=xml
      env:
        DB_HOST: localhost
        DB_PORT: ${{ job.services.db.ports[3306] }}
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: testdb
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml